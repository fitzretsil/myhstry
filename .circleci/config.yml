# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/myhstry
    # The primary container is an instance of the first image listed. The job's commands run in this container.
    docker:
      - image: circleci/openjdk:8-jdk
    # The secondary container is an instance of the second listed image which is run in a common network where ports exposed on the primary container are available on localhost.
      - image: circleci/mysql:latest
    steps:
      - checkout
      - restore_cache:
          key: 
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Build
          command: mvn install
      - save_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
  test:
    docker:
      - image: circleci/openjdk:8-jdk
    # The secondary container is an instance of the second listed image which is run in a common network where ports exposed on the primary container are available on localhost.
      - image: circleci/mysql:latest
    steps:
      - checkout
      - run:
          name: Test
          command: mvn integration-test -Dspring.profiles.active=test
      - store_artifacts:
          path: test-results.xml
          prefix: tests

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build

      
#      # Prepare for Docker commands
#      - setup_remote_docker
#      
#      # Login to Docker
#      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
#      
#      # Build then Push the image to the Docker Respository
#      - run: ./mvnw install dockerfile:build -Dspring.profiles.active=test
#      - run: ./mvnw install dockerfile:push -Dspring.profiles.active=test
#
#  deploy:
#    docker:
#      - image: circleci/openjdk:8-jdk
#    working_directory: ~/myhstry  
#    steps:
#      - run:
#          name: Deploy if tests pass and branch is Master
#          command: ssh -o "StrictHostKeyChecking no" $USERNAME@$SERVER docker pull andydiack/myhstry